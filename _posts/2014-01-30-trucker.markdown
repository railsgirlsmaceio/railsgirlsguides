---
layout: default
title: Rails Girls on Trucker
permalink: trucker
---

# Publique sua aplicação com Trucker.io

*Created by Floor Drees, [@floordrees](https://twitter.com/floordrees) for [Rails Girls Leiden](http://railsgirls.com/leiden)* 

### Instale o Trucker

Siga os passos 1 a 3 do [Getting Started guide](http://developers.trucker.io/Getting-Started) para criar uma conta, instalar a ferramenta de linha de comando e login.

Para instalar o `trucker-cli` (linha de comandos da ferramenta), execute:
{% highlight sh %}
$ gem install trucker-cli
{% endhighlight %}

#### Fazendo login no Trucker

Você pode criar e gerenciar aplicativos usando o painel de controle do Trucker. No entanto, você também precisará fazer login usando o cliente de linha de comando.

{% highlight sh %}
$ truck target https://api.ie.trucker.io  
Setting target to https://api.ie.trucker.io... OK  

$ truck login  
email>  
password>  
{% endhighlight %}

Neste ponto, o cliente Trucker vai exigir que você escolha um espaço para trabalhar. Os espaços são ambientes cuja finalidade é organizar as suas aplicações baseadas em seu estágio do ciclo de vida. A sua conta Trucker vem equipada com os seguintes espaços:

{% highlight sh %}
1: development
2: production
3: staging
Space>
{% endhighlight %}

__COACH__: Fale sobre os benefícios da implantação de Trucker.io (e ter datacenters na Europa, em vez de os EUA).

### Controle de Versão

Nós precisamos adicionar em nosso código o controle de versão. Você pode fazer isso executando os  seguintes comandos no terminal:

{% highlight sh %}
git init
git add .
git commit -m "initial commit"
{% endhighlight %}

__COACH__: Este seria um grande momento para falar sobre os sistemas de controle de versão e git.

### Publicando sua aplicação para o Trucker

#### Fazendo pushing de sua aplicação para o Trucker.io

Primeiro vamos executar o comando `push` e depois digite o nome que você quer que sua aplicação tenha (nós usaremos `railsgirls`).
{% highlight sh %}
$ truck push
Name> railsgirls
{% endhighlight %}


{% highlight sh %}
Instances> 1

1: 128M
2: 256M
3: 512M
4: 1G
Memory Limit> 256M

Creating railsgirls... OK

1: railsgirls
2: none
Subdomain> railsgirls

1: ie.trucker.io
2: none
Domain> ie.trucker.io

Creating route railsgirls.ie.trucker.io... OK
Binding railsgirls.trucker.io to railsgirls... OK
{% endhighlight %}

Em seguida, adicione o MySQL como seu banco de dados:

{% highlight sh %}
Create services for application?> y

1: rds-mysql n/a, via aws
2: redis 2.6
3: user-provided , via
What kind?> 1

Name?> rds-mysql-aa0d6

1: 100mb: Shared service, 100MB storage, 10 connections
Which plan?> 1

Creating service rds-mysql-aa0d6... OK
Binding rds-mysql-aa0d6 to trucker-rails... OK
{% endhighlight %}

__COACH__: Fale sobre MySQL.


Nós não queremos adicionar outros serviços, você pode responder às seguintes perguntas com `n`:
{% highlight sh %}
Create another service?> n

Bind other services to application?> n
{% endhighlight %}

Depois salve sua aplicação
{% highlight sh %}
Save configuration?> y

Saving to manifest.yml... OK
Uploading trucker-rails
{% endhighlight %}

e seu aplicativo estará publicado. A saída no seu terminal deve ser algo como isto:

{% highlight sh %}
Uploading railsgirls... OK
Preparing to start railsgirls... OK
-----> Downloaded app package (40K)
-----> Using Ruby version: ruby-1.9.3
-----> Installing dependencies using Bundler version 1.3.2
(...)
Checking status of app 'railsgirls'...
  1 of 1 instances running (1 running)
Push successful! App 'railsgirls' available at http://railsgirls.ie.trucker.io
{% endhighlight %}

Sua aplicação agora está disponível em http://railsgirls.ie.trucker.io!