---
layout: default
title: Autenticação com Devise
permalink: devise
---

# Autenticação com Devise

*Criado por Piotr Steininger, [@polishprince](https://twitter.com/polishprince)*

*Atualizado por Ernesto Jimenez, [@ernesto_jimenez](https://twitter.com/ernesto_jimenez)*

*Traduzido por Maujor, [site do Maujor](http://www.maujor.com)*

**Esse guia assume que você já criou a app RailsGirls como mostrado no** [**tutorial para criação da app Rails Girls**](/app).


## *1.*Adicione a gem Devise

Abra sua `Gemfile` e acrescente a seguinte linha de código:

{% highlight ruby %}
gem 'devise'
{% endhighlight %}
e execute
{% highlight sh %}
bundle install
{% endhighlight %}
para instalar a gem. **Não se esqueça de restartar o servidor Rails**.

## *2.*Configure devise na sua app

Execute o seguinte comando no terminal:

{% highlight sh %}
rails g devise:install
{% endhighlight %}


## *3.*Configure Devise

Assegure-se de ter definido as opções default para URL no ambiente dos seus arquivos. Abra `config/environments/development.rb` e adicione a seguinte linha de código:
{% highlight ruby %}
   config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }
{% endhighlight %}

antes da palavra-chave `end`.

Abra `app/views/layouts/application.html.erb` e adicione o seguinte:

{% highlight erb %}
<% if notice %>
  <p class="alert alert-success"><%= notice %></p>
<% end %>
<% if alert %>
  <p class="alert alert-danger"><%= alert %></p>
<% end %>
{% endhighlight %}
right above
{% highlight ruby %}
   <%= yield %>
{% endhighlight %}

Abra `app/views/ideas/show.html.erb` e remova a seguinte linha:

{% highlight erb %}
<p id="notice"><%= notice %></p>
{% endhighlight %}

Faça o mesmo em `app/views/comments/show.html.erb`. Aquelas linhas não são necessárias, pois nós acrescentamos notice no arquivo `app/views/layouts/application.html.erb`.

## *4.*Configure o modelo de usuários

Usaremos um script gerador de empacotamento para criar o modelo de usuários.
{% highlight sh %}
   rails g devise user
   rake db:migrate
{% endhighlight %}

**Coach:** Explicar qual foi o modelo de usuário criado. Qual a finalidade dos campos?

## *5.*Criando o primeiro usuário

Agora que está tudo devidamente configurado podemos criar nosso primeiro usuário. Devise gera todos os códigos e caminhos necessários para criar contas, log in, log out, etc.

Certifique-se de que o servidor rails está rodando, abra [http://localhost:3000/users/sign_up](http://localhost:3000/users/sign_up) e crie uma conta de usuário.

## *6.*Crie links para cadastramento e login

Agora só nos resta criar links e notificação de usuário logado no canto superior direito da barra de navegação.

Para fazer isso edite `app/views/layouts/application.html.erb` e acrescente as seguintes linhas:
{% highlight erb %}
<p class="navbar-text pull-right">
<% if user_signed_in? %>
  Logado como: <strong><%= current_user.email %></strong>.
  <%= link_to 'Editar perfil', edit_user_registration_path, :class => 'navbar-link' %> |
  <%= link_to "Logout", destroy_user_session_path, method: :delete, :class => 'navbar-link'  %>
<% else %>
  <%= link_to "Registrar-se", new_user_registration_path, :class => 'navbar-link'  %> |
  <%= link_to "Login", new_user_session_path, :class => 'navbar-link'  %>
<% end %>
{% endhighlight %}
right after
{% highlight erb %}
<ul class="nav">
  <li class="active"><a href="/ideas">Ideas</a></li>
</ul>
{% endhighlight %}

Para finalizar force o usuário a ser redirecionado para a página de login se ele não estiver logado. Abra `app/controllers/application_controller.rb` e adicione a seguinte linha:

{% highlight ruby %}
  before_action :authenticate_user!
{% endhighlight %}

depois de `protect_from_forgery with: :exception`.

Abra seu navegador e execute as ações de login e logout.

**Coach:** Falar sobre `user_signed_in?` e `current_user` helpers. Qual é a utilidade destas funcionalidades?

## O que vem a seguir?

* Acrescente campos extras no modelo de usuários
* Adicione relacionamentos entre usuários e ideas
* Crie restrições de modo a permitir que usuários editem somente suas próprias ideas e apague seus próprios comentários
* Permita expandir roles ou permissões para usuários (use uma das gem populares, tal como like CanCan)


