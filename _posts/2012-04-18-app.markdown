---
layout: default
title: Tutorial para criação da app Rails Girls
permalink: app
---

# Tutorial para criação da app Rails Girls

*Criado por Vesa Vänskä, [@vesan](https://twitter.com/vesan)*  
*Traduzido por Maujor, [site do Maujor](http://www.maujor.com)*

**Você deverá ter Rails instalado.** [**Consulte o guia de instalação se você ainda não instalou.**](install)

## Conhecendo as ferramentas

<div class="indent" markdown="1">

<h3><i class="icon-text-editor">&nbsp;</i></h3>

### Editor de texto

* [Atom](https://atom.io/), [Sublime Text](http://www.sublimetext.com),  Vim e Emacs são alguns dos editores de texto que você poderá usar para escrever códigos e editar arquivos.

<h3><i class="icon-prompt">&nbsp;</i></h3>

### Terminal (conhecido como Command Prompt no Windows): é a interface * onde você vai iniciar o servidor rails e executar comandos.

<h3><i class="icon-browser">&nbsp;</i></h3>

### Navegador web

* (Firefox, Safari, Chrome) usados para visualizar sua aplicação.

</div>

### Importante

É importante que você conheça a sintaxe de comandos específica para seu Sistema Operacional - os comandos a executar em computadores rodando Windows podem apresentar pequenas diferenças sintáticas em relação àqueles usados em ambientes Mac ou Linux.  Se você não estiver seguro com a sintaxe dos comandos use o link para o sistema operacional, link este localizado  após os comandos mostrados neste tutorial. Se você estiver usando um serviço na nuvem  (por exemplo: nitrous), você deverá executar os comandos conforme a sintaxe Linux ainda que esteja em ambiente Windows.

## *1.*Criando a aplicação

Vamos criar uma app Rails a partir do zero denominada *railsgirls*.

Comecemos abrindo o Terminal:

* Mac OS X: Abra Spotlight, digite *Terminal* e clique na aplicação *Terminal*.
* Windows: Clique Start e procure *Command Prompt*, clique em *Command Prompt with Ruby on Rails*.
* Linux (Ubuntu/Fedora): Procure por *Terminal* no dash e clique *Terminal*.
* Serviço na nuvem (por exemplo: nitrous): Faça login na sua conta, inicie sua interface e vá para a IDE (ver [guia de instalação](/install#using-a-cloud-service) para detalhes). Em geral o terminal está localizado na parte inferior da janela do navegador.

Em seguida digite no terminal os comandos mostrados a seguir :

<div class="os-specific">
  <div class="nix">
{% highlight sh %}
mkdir projetos
{% endhighlight %}

    <div>
<p>Rodando o comando  <code>ls</code> no terminal você poderá constatar que um diretório denominado  <code>projetos</code> foi criado. Você verá o diretório <code>projetos</code> na saida do terminal. A seguir você deverá ir para o diretório  <code>projetos</code> executando o seguinte comando:</p>
    </div>

{% highlight sh %}
cd projetos
{% endhighlight %}

    <div>
<p>Verifique se você está em um diretório vazio executando novamente o comando  <code>ls</code>. Vamos criar nossa nova app denominada  <code>railsgirls</code> executando o seguinte comando:</p>
    </div>

{% highlight sh %}
rails new railsgirls
{% endhighlight %}

    <div>
<p>Este comando criará a nova app no diretório <code>railsgirls</code>. Vamos novamente entrar no diretório recém criado executando o seguinte comando:</p>
    </div>

{% highlight sh %}
cd railsgirls
{% endhighlight %}

    <div>
<p>Se você executar o comando <code>ls</code> neste diretório verá que foram criadas pastas, tais como, <code>app</code> e <code>config</code>. Agora podermos iniciar o servidor  rails executando o seguinte comando:</p>
    </div>

{% highlight sh %}
rails server
{% endhighlight %}
  </div>

  <div class="win">
{% highlight sh %}
mkdir projects
{% endhighlight %}

    <div>
<p>Execute o camando <code>dir</code> para listar diretórios e verifique que um diretório chamado <code>projects</code> foi criado. Você verá o diretório <code>projects</code> na saída do terminal. Vamos novamente entrar no diretório <code>projects</code> recém criado executando o seguinte comando:</p>
    </div>

{% highlight sh %}
cd projects
{% endhighlight %}

    <div>
<p>Verifique que você está em um diretório vazio executando novamente o comando <code>dir</code>. Vamos criar nossa nova app denominada  <code>railsgirls</code> executando o seguinte comando:</p>
    </div>

{% highlight sh %}
rails new railsgirls
{% endhighlight %}

    <div>
<p>Este comando criará a nova app no diretório <code>railsgirls</code>. Vamos novamente entrar no diretório recém criado executando o seguinte comando:</p>
    </div>

{% highlight sh %}
cd railsgirls
{% endhighlight %}

    <div>
<p>Se você executar o comando <code>dir</code> neste diretório verá que foram criadas pastas, tais como, <code>app</code> e <code>config</code>. Agora podermos iniciar o servidor  rails executando o seguinte comando:</p>
    </div>

{% highlight sh %}
rails server
{% endhighlight %}
  </div>
</div>

Abra <http://localhost:3000> no navegador. Se você estiver usando um serviço na nuvem (por exemplo: nitrous), use a funcionalidade preview do serviço (ver [installation guide](/install#using-a-cloud-service) para detalhes).

Se você ver a página denominada  "Welcome aboard" é porque tudo deu certo e sua nova app está funcionando corretamente.

Note que nesta nova janela o prompt de comando não é visível, pois você se encontra no servidor Rails e o prompt de comando tem o seguinte aspecto:

<div class="os-specific">
  <div class="nix">
{% highlight sh %}
$
{% endhighlight %}
  </div>
  <div class="win">
{% highlight sh %}
>
{% endhighlight %}
  </div>
</div>

Quando o prompt de comando não é visível você não poderá executar comandos. Se você tentar executar o comando `cd` ou qualquer outro comando eles não terão efeito algum. Para parar o servidor e retornar ao prompt de comando normal:

Pressione as teclas <kbd>Ctrl</kbd>+<kbd>C</kbd> no terminal para parar o servidor.

**Coach:**  Explicar a finalidade de cada comando. O que foi criado? O que o servidor fez?


## *2.*Criar o Scaffold para Idea

Vamos usar uma funcionalidade do Rails denominada scaffold para criar um ponto de partida que nos permitirá listar, adicionar, remover, editar e ver as "coisas"; no nosso caso ideas.


**Coach:** O que é Rails scaffolding? (Explicar o comando, o nome do modelo, as tabelas de banco de dados relacionadas, as convenções de nomes, atributos, tipos, etc.) O que é migração e porquê são necessárias?

{% highlight sh %}
rails generate scaffold idea name:string description:text picture:string
{% endhighlight %}

A funcionalidade scaffold cria novos arquivos no diretório do projeto, mas para que tudo funcione apropriadamente é necessário executar alguns comandos com a finalidade de atualizar o banco de dados e reiniciar o servidor.

{% highlight sh %}
rake db:migrate
rails server
{% endhighlight %}

Abra <http://localhost:3000/ideas> no navegador. Para serviços na nuvem (por exemplo: nitrous) acrescente '/ideas' na url do preview (ver [guia de instalação](/install#using-a-cloud-service)).

Click around and test what you got by running these few command-line commands. (**precisa ser traduzido**)

## *3.*Design

**Coach:** Fale sobre o relacionamento entre HTML e Rails. Quais são as visualizações geradas por HTML e quais são as geradas por Embedded Ruby (ERB)? O que é MVC é como ele se relaciona no contexto? (Modelos e controllers são responsáveis por gerar visualizações com HTML.)

Nossa app apresenta um design bem pobre por enquanto. Vamos providenciar melhorias nesse visual. Vamos usar o projeto Twitter Bootstrap para estilizar de uma maneira fácil nossa app.

Abra `app/views/layouts/application.html.erb` no seu editor de texto e acima da linha:

{% highlight erb %}
<%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %>
{% endhighlight %}

acrescente o seguinte:

{% highlight erb %}
<link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap.css">
<link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap-theme.css">
{% endhighlight %}

agora substitua

{% highlight erb %}
<%= yield %>
{% endhighlight %}

por

{% highlight erb %}
<div class="container">
  <%= yield %>
</div>
{% endhighlight %}

Vamos criar uma barra de navegação e um rodapé para nosso layout. No mesmo arquivo, logo após a tag de abertura `<body>` acrescente:

{% highlight html %}
<nav class="navbar navbar-default navbar-fixed-top" role="navigation">
  <div class="container">
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="/">The Idea app</a>
    </div>
    <div class="collapse navbar-collapse">
      <ul class="nav navbar-nav">
        <li class="active"><a href="/ideas">Ideas</a></li>
      </ul>
    </div>
  </div>
</nav>
{% endhighlight %}

antes da tag de fechamento `</body>` acrescente

{% highlight html %}
<footer>
  <div class="container">
    Rails Girls 2016
  </div>
</footer>
<script src="//maxcdn.bootstrapcdn.com/bootstrap/3.0.3/js/bootstrap.js"></script>
{% endhighlight %}

Agora vamos alterar a estilização da tabela ideas. Abra `app/assets/stylesheets/application.css` e no final acrescente:

{% highlight css %}
body { padding-top: 100px; }
footer { margin-top: 100px; }
table, td, th { vertical-align: middle; border: none; }
th { border-bottom: 1px solid #DDD; }
{% endhighlight %}

A seguir, após salvar os arquivos e dar um "refresh" no navegador observe as alterações no layout. Você poderá fazer outras modificações na marcação HTML e criar novas regras de estilização.

Se o Terminal mostrar uma mensagem de erro informando que há algo errado com a JavaScript ou com CoffeeScript, instale [nodejs](http://nodejs.org/download/). Isto não deverá acontecer se você usou RailsInstaller (mas sim, quando você instalou Rails via ```gem install rails```).

**Coach:** Fale um pouco sobre CSS e layouts.

## *4.*Criando mecanismo para upload de imagens

Vamos instalar um software que nos permita fazer upload de imagens com Rails.

Abra `Gemfile` localizado no diretório do projeto e depois da linha:

{% highlight ruby %}
gem 'sqlite3'
{% endhighlight %}

acrescente o seguinte:

{% highlight ruby %}
gem 'carrierwave'
{% endhighlight %}

**Coach:** Explique o que são bibliotecas e qual a sua utilidade. Fale um pouco sobre softwares de código aberto.

Pressione as teclas <kbd>Ctrl</kbd>+<kbd>C</kbd> no terminal para parar o servidor.

Execute o seguinte comando no terminal:

{% highlight sh %}
bundle
{% endhighlight %}

Agora estamos em condições de gerar o código para gerenciar uploads. Execute o seguinte comando no terminal:

{% highlight sh %}
rails generate uploader Picture
{% endhighlight %}

Inicie o servidor.

Nota: Alguns preferem usar uma segunda instância do terminal para manter o servidor rails rodando continuamente.
Se este for o seu caso é necessário **restartar o servidor Rails** agora.
Isto é necessário para que a app carregue a biblioteca adicionada.

Abra `app/models/idea.rb` e depois da linha:

{% highlight ruby %}
class Idea < ApplicationRecord
{% endhighlight %}

acrescente a seguinte linha:

{% highlight ruby %}
mount_uploader :picture, PictureUploader
{% endhighlight %}

Abra `app/views/ideas/_form.html.erb` e substitua:

{% highlight erb %}
<%= f.text_field :picture %>
{% endhighlight %}

por

{% highlight erb %}
<%= f.file_field :picture %>
{% endhighlight %}

Em alguns casos poderá ocorrer o erro *TypeError: can't cast ActionDispatch::Http::UploadedFile to string*.

Se isso acontecer, abra `app/views/ideas/_form.html.erb` e substitua a linha:

{% highlight erb %}
<%= form_for(idea) do |f| %>
{% endhighlight %}

por

{% highlight erb %}
<%= form_for(idea, html: {multipart: true}) do |f| %>
{% endhighlight %}

No seu navegador adicione uma nova idea e nela uma imagem. Esta ação fará com que seja mostrada não a imagrm, mas o caminho para a imagem. Vamos corrigir isto.

Abra `app/views/ideas/show.html.erb` e substitua:

{% highlight erb %}
<%= @idea.picture %>
{% endhighlight %}

por

{% highlight erb %}
<%= image_tag(@idea.picture_url, width: 600) if @idea.picture.present? %>
{% endhighlight %}

Dê um "refresh" no navegador e constate a renderização da imagem.

**Coach:** Fale um pouco sobre marcação HTML.


## *5.*Acertos finais nas rotas

Abra <http://localhost:3000> (ou o preview da url, caso você esteja usando um serviço na nuvem). Ainda é mostrada a página "Welcome aboard". Vamos fazer o redirecionamento para a página ideas da app.

Abra `config/routes.rb` e logo após a primeira linha acrescente:

{% highlight ruby %}
root to: redirect('/ideas')
{% endhighlight %}

Teste as alterações feitas abrindo o caminho para a raiz da app (ou seja, <http://localhost:3000/> ou o preview da url) no seu navegador.

**Coach:** Fale sobre rotas e os detalhes na ordenação das rotas e seus relacionamentos com arquivos estáticos.

## Criando uma página estática na sua app

Vamos criar uma página estática na nossa app com a finalidade de fornecer informações sobre o autor da aplicação — você!

{% highlight sh %}
rails generate controller pages info
{% endhighlight %}

Este comando criará um novo diretório em `app/views` denominado `/pages` e dentro deste diretório um arquivo denominado `info.html.erb` que será a página de informações sobre você, o autor da aplicação.

É também adicionado um  novo caminho em routes.rb.

{% highlight ruby %}
get "pages/info"
{% endhighlight %}

Abra  `app/views/pages/info.html.erb` e acrescente informações sobre você na marcação HTML. Para visualizar a nova página de informações sobre o autor digite <http://localhost:3000/pages/info> na barra de endereços do navegador ou se você usa um serviço na nuvem acrescente '/pages/info' na URL do preview.

## *6.*O que vem a seguir?

* Incrementando o design com HTML &amp; CSS
* Adicionando sistema de avaliação
* Usando CoffeeScript (ou JavaScript) para interação
* Usando técnicas de redimensionamento de imagens para carregamento rápido.

## Outros Guias

* Guia 0: [Handy cheatsheet for Ruby, Rails, console etc.](http://www.pragtob.info/rails-beginner-cheatsheet/)
* Guia 1: [Área de comentários para a app Rails Girls por Janika Liiv](/commenting)
* Guia 2: [Put your app online with Heroku by Terence Lee](/heroku) / [Put your app online with OpenShift by Katie Miller](/openshift) / [Put your app online with anynines](/anynines) / [Put your app online with Trucker.io](/trucker)
* Guia 3: [Criando thumbnails com Carrierwave por Miha Filej](/thumbnails)
* Guia 4: [Add design using HTML &amp; CSS by Alex Liao](/design)
* Guia 5: [Add Authentication (user accounts) with Devise by Piotr Steininger](/devise)
* Guia 6: [Adding profile pictures with Gravatar](/gravatar)
* Guia 7: [Test your app with RSpec](/testing-rspec)
* Guia 8: [Continuous Deployment with Travis-CI](/continuous-travis) / [Continuous Deployment with Codeship](/continuous) / [Continuous Deployment with Snap CI](/continuous-snap-ci)
* Guia 9: [Go through additional explanations for the App by Lucy Bain](https://github.com/lbain/railsgirls)
* Guia 10: [Adding a back-end with Active Admin](/backend-with-active-admin)
